html {
    box-sizing: border-box;
    background: #ffc600;
    font-family: 'helvetica neue';
    font-size: 20px;
    font-weight: 200;
}

body {
    margin: 0;
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

.panels {
    min-height: 100vh; /* seems to be a common way to set min-height */
    overflow: hidden; /* necessary in order for pannels to appear properly */
    display: flex; /* initaitat flex box to make panels appear side-by-side */
}

.panel {
    background: #6B0F9C;
    box-shadow: inset 0 0 0 5px rgba(255, 255, 255, 0.1);
    color: white;
    text-align: center;
    align-items: center;
    /* Safari transitionend event.propertyName === flex */
    /* Chrome + FF transitionend event.propertyName === flex-grow */
    transition:
        font-size 0.7s cubic-bezier(0.61, -0.19, 0.7, -0.11),
        flex 0.7s cubic-bezier(0.61, -0.19, 0.7, -0.11),
        background 0.2s;
        /* setting transitions for all events in the child elements of this div. Using a cubic-bezier allows us to get a cool open and close effect. */
    font-size: 20px;
    background-size: cover;
    background-position: center;
    flex: 1; /* this means that each of the panels will evenly distribute the extra space within the container amongst themselves */
    justify-content: center;
    align-items: center;
    display: flex; /* turn panel into a flex container. This is a good example of nesting flex containers within each other. In CSS, an element can be both a flex item and a flex container. */
    flex-direction: column; /* changes to vertical orientation */
}

.panel1 {
    background-image: url(https://source.unsplash.com/gYl-UtwNg_I/1500x1500);
}

.panel2 {
    background-image: url(https://source.unsplash.com/rFKUFzjPYiQ/1500x1500);
}

.panel3 {
    background-image: url(https://images.unsplash.com/photo-1465188162913-8fb5709d6d57?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&w=1500&h=1500&fit=crop&s=967e8a713a4e395260793fc8c802901d);
}

.panel4 {
    background-image: url(https://source.unsplash.com/ITjiVXcwVng/1500x1500);
}

.panel5 {
    background-image: url(https://source.unsplash.com/3MNzGlQM7qs/1500x1500);
}

/* Flex Items */
.panel > * {
    margin: 0;
    width: 100%;
    transition: transform 0.5s;
    /* border: 1px solid red; using a border in order to see how the words will move */
    flex: 1 0 auto; /* gives space around elements (words) */
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Moving words off the page */
.panel > *:first-child { transform: translateY(-100%); } /* saying that all first-child elements of .panel will have this transformation */
.panel.open-active > *:first-child { transform: translateY(0); }
.panel > *:last-child { transform: translateY(100%); } /* for last child elements (ones at the bottom) */
.panel.open-active > *:last-child { transform: translateY(0); }
/* When the panel has a class of .open-active, the elements will animate, showing words moving on and off the page (done by translaing them across the Y-axis). MAKE SURE TO USE CORRECT PUNCTUATION with TRANSFORM!! */

.panel p {
    text-transform: uppercase;
    font-family: 'Amatic SC', cursive;
    text-shadow: 0 0 4px rgba(0, 0, 0, 0.72), 0 0 14px rgba(0, 0, 0, 0.45);
    font-size: 2em;
}

.panel p:nth-child(2) {
    font-size: 4em;
}

.panel.open {
    font-size: 40px;
    flex: 5;
}
/* When the panel has a class of .open, we want the words to grow and shrink in size. We do this by giving it a flex of 5. This means that when it has the class of .open, it will take 5 times the normal amount of space. This creates an animated effect (transitional effect). Earlier in the code, in the .panel class, we specified the transitions for all of these elements that are children within that div. This is where the transitions are coming from. */